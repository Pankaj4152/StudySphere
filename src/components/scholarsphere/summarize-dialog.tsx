"use client";

import { useState, useTransition } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { summarizeDocument } from "@/ai/flows/summarize-document";
import { Loader2, Sparkles, Upload } from "lucide-react";

const toBase64 = (file: File) => new Promise<string>((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result as string);
    reader.onerror = reject;
});


export function SummarizeDialog() {
  const [file, setFile] = useState<File | null>(null);
  const [summary, setSummary] = useState("");
  const [isPending, startTransition] = useTransition();
  const { toast } = useToast();

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      setFile(e.target.files[0]);
      setSummary("");
    }
  };

  const handleSummarize = () => {
    if (!file) {
      toast({
        variant: "destructive",
        title: "No file selected",
        description: "Please select a document to summarize.",
      });
      return;
    }

    startTransition(async () => {
      try {
        const documentDataUri = await toBase64(file);
        const result = await summarizeDocument({ documentDataUri });
        setSummary(result.summary);
        toast({
            title: "Summary Generated!",
            description: "Your document has been successfully summarized."
        })
      } catch (error) {
        console.error(error);
        toast({
          variant: "destructive",
          title: "Summarization Failed",
          description: "Could not generate a summary. The file might be corrupted or in an unsupported format.",
        });
      }
    });
  };

  return (
    <Dialog onOpenChange={() => { setFile(null); setSummary(""); }}>
      <DialogTrigger asChild>
        <Button variant="outline">
          <Sparkles className="mr-2 h-4 w-4" /> AI Document Summarizer
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[625px]">
        <DialogHeader>
          <DialogTitle>AI Document Summarizer</DialogTitle>
          <DialogDescription>
            Upload a document (PDF, lecture notes) to get a concise summary generated by AI.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid grid-cols-4 items-center gap-4">
            <Label htmlFor="document" className="text-right">
              Document
            </Label>
            <div className="col-span-3">
                <Input id="document" type="file" onChange={handleFileChange} accept=".pdf,.txt,.md,.docx" />
                {file && <p className="text-xs text-muted-foreground mt-1">{file.name}</p>}
            </div>
          </div>
          {summary && (
            <div className="grid grid-cols-4 items-start gap-4">
              <Label htmlFor="summary" className="text-right pt-2">
                Summary
              </Label>
              <Textarea id="summary" value={summary} readOnly className="col-span-3 min-h-[200px] font-code" />
            </div>
          )}
        </div>
        <DialogFooter>
          <Button onClick={handleSummarize} disabled={!file || isPending}>
            {isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Summarizing...
              </>
            ) : (
                <>
                <Sparkles className="mr-2 h-4 w-4" />
                Generate Summary
                </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
